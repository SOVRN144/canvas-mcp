name: CI
on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      PUBLIC_URL:
        description: 'Base URL (e.g., https://<ngrok>.ngrok-free.dev)'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci || npm install
      - run: npm run typecheck
      - run: npm run build

  smoke:
    runs-on: ubuntu-latest
    needs: build
    env:
      # Safe to expose; used by the server. Token is optional.
      CANVAS_BASE_URL: ${{ vars.CANVAS_BASE_URL }}
      CANVAS_TOKEN: ${{ secrets.CANVAS_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci || npm install

      - name: Install CLI deps
        run: |
          sudo apt-get update
          sudo apt-get install -y jq netcat-openbsd

      - name: Start server
        run: |
          set -euo pipefail
          nohup npx tsx src/http.ts > server.log 2>&1 &
          echo $! > server.pid
          # Active readiness probe: try initialize up to 30s
          ready=0
          for i in $(seq 1 30); do
            if curl -sSf -H 'Accept: application/json, text/event-stream' \
                   -H 'Content-Type: application/json' \
                   --data '{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"protocolVersion":"2024-11-05"}}' \
                   http://127.0.0.1:8787/mcp >/dev/null; then
              ready=1; break
            fi
            sleep 1
          done
          if [ "$ready" -ne 1 ]; then
            echo "Server never responded to initialize within 30s"
            echo "----- server.log -----"
            tail -n +1 server.log || true
            exit 1
          fi
          # Do a proper initialize to capture the session header
          H=$(mktemp)
          curl -sD "$H" -H 'Accept: application/json, text/event-stream' \
               -H 'Content-Type: application/json' \
               --data '{"jsonrpc":"2.0","id":1,"method":"initialize","params":{"protocolVersion":"2024-11-05"}}' \
               http://127.0.0.1:8787/mcp | jq . > init.json
          awk -F': *' 'tolower($1)=="mcp-session-id" {print $2}' "$H" | tr -d '\r' > session.txt
          test -s session.txt

      - name: Smoke test (tools/list → echo)
        run: |
          set -euo pipefail
          SESSION=$(cat session.txt)
          LIST=$(curl -sS http://127.0.0.1:8787/mcp \
            -H 'Accept: application/json, text/event-stream' \
            -H 'Content-Type: application/json' \
            -H "Mcp-Session-Id: $SESSION" \
            --data '{"jsonrpc":"2.0","id":2,"method":"tools/list","params":{}}')
          echo "$LIST" | jq .
          # portable jq: map(..)|any
          echo "$LIST" | jq -e '.result.tools | map(.name=="echo") | any'
          ECHO=$(curl -sS http://127.0.0.1:8787/mcp \
            -H 'Accept: application/json, text/event-stream' \
            -H 'Content-Type: application/json' \
            -H "Mcp-Session-Id: $SESSION" \
            --data '{"jsonrpc":"2.0","id":3,"method":"tools/call","params":{"name":"echo","arguments":{"text":"hi"}}}')
          echo "$ECHO" | jq -e '.result.content[0].text == "hi"'

      - name: Stop server if running
        if: always()
        run: |
          set +e
          if [ -f server.pid ]; then
            kill "$(cat server.pid)" || true
          fi
          pkill -f "tsx src/http.ts" || true

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-logs
          path: |
            server.log
            init.json
            session.txt

  smoke-canvas:
    runs-on: ubuntu-latest
    needs: build
    # Only use vars and github context - no secrets in job-level if
    if: ${{ vars.CANVAS_BASE_URL != '' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository) }}
    env:
      CANVAS_BASE_URL: ${{ vars.CANVAS_BASE_URL }}
      CANVAS_TOKEN: ${{ secrets.CANVAS_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Check Canvas envs
        id: canvas_guard
        run: |
          if [ -z "${CANVAS_TOKEN:-}" ]; then
            echo "has_canvas=false" >> "$GITHUB_OUTPUT"
            echo "Canvas token missing; skipping Canvas smoke."
          else
            echo "has_canvas=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Build
        if: ${{ steps.canvas_guard.outputs.has_canvas == 'true' }}
        run: |
          npm ci || npm install
          npm run typecheck
          npm run build

      - name: Install CLI deps
        if: ${{ steps.canvas_guard.outputs.has_canvas == 'true' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Start Canvas MCP server
        if: ${{ steps.canvas_guard.outputs.has_canvas == 'true' }}
        run: |
          set -euo pipefail
          LOG_LEVEL=error NODE_ENV=test node dist/http.js > server.log 2>&1 &
          echo $! > server.pid

      - name: Wait for Canvas server (POST initialize readiness)
        if: ${{ steps.canvas_guard.outputs.has_canvas == 'true' }}
        timeout-minutes: 3
        run: |
          set -euo pipefail
          for i in $(seq 1 60); do
            code=$(curl -sS -o /dev/null -w "%{http_code}" \
              -H 'Accept: application/json, text/event-stream' \
              -H 'Content-Type: application/json' \
              --data '{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"protocolVersion":"2024-11-05"}}' \
              http://127.0.0.1:8787/mcp || true)
            [ "$code" = "200" ] && exit 0
            sleep 1
          done
          echo "::error::Server did not become ready"
          [ -f server.log ] && tail -n 200 server.log || true
          exit 1

      - name: Canvas smoke (courses → modules → files)
        if: ${{ steps.canvas_guard.outputs.has_canvas == 'true' }}
        run: |
          set -euo pipefail
          H=$(mktemp)
          
          # Initialize with proper headers
          curl -fsS -D "$H" \
            -H 'Accept: application/json, text/event-stream' \
            -H 'Content-Type: application/json' \
            --data '{"jsonrpc":"2.0","id":1,"method":"initialize","params":{"protocolVersion":"2024-11-05"}}' \
            http://127.0.0.1:8787/mcp | tee init.json >/dev/null
          
          SESSION=$(awk -F': *' 'tolower($1)=="mcp-session-id"{print $2}' "$H" | tr -d '\r')
          test -n "$SESSION"
          
          # Tools list with proper headers
          TOOLS=$(curl -fsS http://127.0.0.1:8787/mcp \
            -H "Mcp-Session-Id: $SESSION" \
            -H 'Accept: application/json, text/event-stream' \
            -H 'Content-Type: application/json' \
            --data '{"jsonrpc":"2.0","id":2,"method":"tools/list","params":{}}')
          echo "$TOOLS" | jq .
          echo "$TOOLS" | jq -e '.result.tools | map(.name=="list_courses") | any'
          
          # Canvas API test with proper headers and error handling
          curl -fsS --fail-with-body http://127.0.0.1:8787/mcp \
            -H "Mcp-Session-Id: $SESSION" \
            -H 'Accept: application/json, text/event-stream' \
            -H 'Content-Type: application/json' \
            --data '{"jsonrpc":"2.0","id":3,"method":"tools/call","params":{"name":"list_courses","arguments":{}}}' | jq .

      - name: Stop Canvas server
        if: always()
        run: |
          set -euo pipefail
          if [ -f server.pid ]; then
            kill "$(cat server.pid)" || true
            rm -f server.pid
          fi
          pkill -f "node dist/http.js" || true
          echo "---- server.log (last 200 lines) ----"
          [ -f server.log ] && tail -n 200 server.log || true

      - name: Upload Canvas logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: canvas-ci-logs
          path: |
            server.log
            init.json

  public_smoke:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.PUBLIC_URL != '' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci || npm install
      - name: Public smoke
        env:
          PUBLIC_BASE: ${{ github.event.inputs.PUBLIC_URL }}
        run: bash scripts/smoke-public.sh
