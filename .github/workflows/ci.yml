name: CI
on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci || npm install
      - run: npm run build

  smoke:
    runs-on: ubuntu-latest
    needs: build
    env:
      # Safe to expose; used by the server. Token is optional.
      CANVAS_BASE_URL: ${{ vars.CANVAS_BASE_URL }}
      CANVAS_TOKEN: ${{ secrets.CANVAS_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci || npm install

      - name: Start server
        run: |
          nohup npx tsx src/http.ts > server.log 2>&1 &
          echo $! > server.pid
          # wait until 8787 is listening
          timeout 15 bash -c 'until nc -z 127.0.0.1 8787; do sleep 0.5; done'

      - name: Smoke test (init → tools/list → echo)
        run: |
          set -euo pipefail
          H=$(mktemp)
          INIT=$(curl -sD "$H" http://127.0.0.1:8787/mcp \
            -H 'Accept: application/json, text/event-stream' \
            -H 'Content-Type: application/json' \
            --data '{"jsonrpc":"2.0","id":1,"method":"initialize","params":{"protocolVersion":"2024-11-05"}}')
          echo "$INIT"
          SESSION=$(awk -F': ' '/^Mcp-Session-Id:/ {print $2}' "$H" | tr -d '\r')
          test -n "$SESSION"

          LIST=$(curl -s http://127.0.0.1:8787/mcp \
            -H 'Accept: application/json, text/event-stream' \
            -H 'Content-Type: application/json' \
            -H "Mcp-Session-Id: $SESSION" \
            --data '{"jsonrpc":"2.0","id":2,"method":"tools/list","params":{}}')
          echo "$LIST" | jq -e '.result.tools | any(.name == "echo")'

          ECHO=$(curl -s http://127.0.0.1:8787/mcp \
            -H 'Accept: application/json, text/event-stream' \
            -H 'Content-Type: application/json' \
            -H "Mcp-Session-Id: $SESSION" \
            --data '{"jsonrpc":"2.0","id":3,"method":"tools/call","params":{"name":"echo","arguments":{"text":"hi"}}}')
          echo "$ECHO" | jq -e '.result.content[0].text == "hi"'

      - name: Tear down
        if: always()
        run: |
          kill "$(cat server.pid)" || true
          sleep 1
          pkill -f "tsx src/http.ts" || true
          echo "---- server.log ----"
          tail -n +1 server.log || true
